{"version":3,"sources":["components/Translate.js","App.js","reportWebVitals.js","index.js"],"names":["Translate","_useState","useState","_useState2","Object","slicedToArray","inputText","setInputText","_useState3","_useState4","resultText","setResultText","_useState5","_useState6","selectedLanguageKey","setLanguageKey","_useState7","_useState8","languagesList","setLanguagesList","_useState9","_useState10","detectLanguageKey","setdetectedLanguageKey","getLanguageSource","axios","post","q","then","response","data","language","useEffect","get","react_default","a","createElement","className","Form","Field","control","placeholder","onChange","e","target","value","selectedLanguage","map","code","name","Button","color","size","onClick","source","translatedText","TextArea","App","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"6RAQe,SAASA,IAAY,IAAAC,EACEC,mBAAS,IADXC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACzBK,EADyBH,EAAA,GACdI,EADcJ,EAAA,GAAAK,EAEIN,mBAAS,IAFbO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAEzBE,EAFyBD,EAAA,GAEbE,EAFaF,EAAA,GAAAG,EAGcV,mBAAS,IAHvBW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAGzBE,EAHyBD,EAAA,GAGJE,EAHIF,EAAA,GAAAG,EAIUd,mBAAS,IAJnBe,EAAAb,OAAAC,EAAA,EAAAD,CAAAY,EAAA,GAIzBE,EAJyBD,EAAA,GAIVE,EAJUF,EAAA,GAAAG,EAKoBlB,mBAAS,IAL7BmB,EAAAjB,OAAAC,EAAA,EAAAD,CAAAgB,EAAA,GAKzBE,EALyBD,EAAA,GAKNE,EALMF,EAAA,GAM1BG,EAAoB,WACtBC,IAAMC,KAAN,mCAA+C,CAC3CC,EAAGrB,IAENsB,KAAK,SAACC,GACHN,EAAuBM,EAASC,KAAK,GAAGC,aA+BhD,OARAC,oBAAU,WACPP,IAAMQ,IAAN,uCACCL,KAAK,SAACC,GACNV,EAAiBU,EAASC,QAG3BN,KACA,CAAClB,IAEA4B,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UAAd,kBACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAAb,uBAEAH,EAAAC,EAAAC,cAAA,WACJF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAACE,EAAA,EAAD,KAEAJ,EAAAC,EAAAC,cAAA,SAAOC,UAAU,cAAjB,cACIH,EAAAC,EAAAC,cAACE,EAAA,EAAKC,MAAN,CAAYF,UAAU,aAClBG,QAAQ,QACRC,YAAY,2BAEZC,SAAU,SAACC,GAAD,OAAOpC,EAAaoC,EAAEC,OAAOC,UAG3CX,EAAAC,EAAAC,cAAA,WACGF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,cAAjB,mBACHH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,kBAAkBK,SAlCpC,SAACI,GACjB/B,EAAe+B,EAAiBF,OAAOC,SAkCnBX,EAAAC,EAAAC,cAAA,2CACClB,EAAc6B,IAAI,SAAChB,GAChB,OACIG,EAAAC,EAAAC,cAAA,UAAQS,MAAOd,EAASiB,MACnBjB,EAASkB,SAKxBf,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAQb,UAAU,SAChBc,MAAM,SACNC,KAAK,QACLC,QA/DF,WAClB1C,EAAcL,GAEdkB,IAEA,IAAIM,EAAO,CACPH,EAAIrB,EACJgD,OAAQhC,EACRsB,OAAQ9B,GAEZW,IAAMC,KAAN,sCAAkDI,GACjDF,KAAK,SAACC,GACHlB,EAAckB,EAASC,KAAKyB,oBAgDd,aAOFrB,EAAAC,EAAAC,cAAA,WAAMF,EAAAC,EAAAC,cAAA,WACNF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,cAAjB,UAA4CH,EAAAC,EAAAC,cAAA,WAC5CF,EAAAC,EAAAC,cAACE,EAAA,EAAKC,MAAN,CAAYF,UAAU,cAClBG,QAASgB,IACTf,YAAY,4BACZI,MAAOnC,QC7EpB+C,MAVf,WACE,OAEEvB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACpC,EAAD,QCCS0D,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAlB,EAAA,GAAAf,KAAAiC,EAAAC,KAAA,WAAqBlC,KAAK,SAAAmC,GAAiD,IAA9CC,EAA8CD,EAA9CC,OAAQC,EAAsCF,EAAtCE,OAAQC,EAA8BH,EAA9BG,OAAQC,EAAsBJ,EAAtBI,OAAQC,EAAcL,EAAdK,QAC3DJ,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAQT,MCCDU,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHvC,EAAAC,EAAAC,cAACF,EAAAC,EAAMuC,WAAP,KACExC,EAAAC,EAAAC,cAACuC,EAAD,QAMJjB","file":"static/js/main.003e42b4.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport {\r\n    Form,\r\n    TextArea,\r\n    Button\r\n} from 'semantic-ui-react';\r\nimport axios from 'axios';\r\n\r\nexport default function Translate() {\r\n    const [inputText, setInputText] = useState('');\r\n    const [resultText, setResultText] = useState('');\r\n    const [selectedLanguageKey, setLanguageKey] = useState('')\r\n    const [languagesList, setLanguagesList] = useState([])\r\n    const [detectLanguageKey, setdetectedLanguageKey] = useState('')\r\n    const getLanguageSource = () => {\r\n        axios.post(`https://libretranslate.de/detect`, {\r\n            q: inputText\r\n        })\r\n        .then((response) => {\r\n            setdetectedLanguageKey(response.data[0].language)\r\n        })\r\n    }\r\n    const translateText = () => {\r\n        setResultText(inputText)\r\n\r\n        getLanguageSource();\r\n\r\n        let data = {\r\n            q : inputText,\r\n            source: detectLanguageKey,\r\n            target: selectedLanguageKey\r\n        }\r\n        axios.post(`https://libretranslate.de/translate`, data)\r\n        .then((response) => {\r\n            setResultText(response.data.translatedText)\r\n        })\r\n    }\r\n\r\n    const languageKey = (selectedLanguage) => {\r\n        setLanguageKey(selectedLanguage.target.value)\r\n    }\r\n\r\n    useEffect(() => {\r\n       axios.get(`https://libretranslate.de/languages`)\r\n       .then((response) => {\r\n        setLanguagesList(response.data)\r\n       })\r\n\r\n       getLanguageSource()\r\n    }, [inputText])\r\n    return (\r\n        <div>\r\n            <div className=\"app-header\">\r\n                <h2 className=\"header\">Translator App</h2>\r\n                <p className='app-p'>My first react app</p>\r\n            </div>\r\n                <hr />\r\n            <div className='app-body'>\r\n                <div className='responsive'>\r\n                    <Form>\r\n                   \r\n                    <label className='label-body'>Enter Text</label>\r\n                        <Form.Field className='input-text'\r\n                            control=\"input\"\r\n                            placeholder='Type Text to Translate..'\r\n                            \r\n                            onChange={(e) => setInputText(e.target.value)}\r\n                        />\r\n                        \r\n                        <br />\r\n                           <label className='label-body'>Select Language</label>\r\n                        <br />\r\n                        <select className=\"language-select\" onChange={languageKey}>\r\n                            <option>Please Select Language...</option>\r\n                            {languagesList.map((language) => {\r\n                                return (\r\n                                    <option value={language.code}>\r\n                                        {language.name}\r\n                                    </option>\r\n                                )\r\n                            })}\r\n                        </select>\r\n                          <Button className='button'\r\n                            color=\"orange\" \r\n                            size=\"large\" \r\n                            onClick={translateText}\r\n                        >\r\n                           \r\n                            Translate</Button>\r\n                        <br /><br />\r\n                        <label className='label-body'>Output</label><br />\r\n                        <Form.Field className='output-text'\r\n                            control={TextArea}\r\n                            placeholder='Your Result Translation..'\r\n                            value={resultText}\r\n                        />\r\n                       \r\n                       \r\n                         \r\n                    </Form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","\r\nimport './App.css';\r\nimport React from 'react';\r\nimport Translate from './components/Translate';\r\n\r\n\r\n\r\nfunction App() {\r\n  return (\r\n\r\n    <div>\r\n      <Translate />\r\n    </div>\r\n    \r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-react';\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}