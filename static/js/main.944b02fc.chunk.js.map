{"version":3,"sources":["components/Translate.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Translate","_useState","useState","_useState2","Object","slicedToArray","inputText","setInputText","_useState3","_useState4","resultText","setResultText","_useState5","_useState6","selectedLanguageKey","setLanguageKey","_useState7","_useState8","languagesList","setLanguagesList","_useState9","_useState10","detectLanguageKey","setdetectedLanguageKey","getLanguageSource","axios","post","q","then","response","data","language","useEffect","get","react_default","a","createElement","className","Form","Field","control","placeholder","onChange","e","target","value","selectedLanguage","map","code","name","Button","color","size","onClick","source","translatedText","TextArea","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App","URL","process","href","origin","addEventListener","concat","fetch","headers","Service-Worker","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"6RAQe,SAASA,IAAY,IAAAC,EACEC,mBAAS,IADXC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACzBK,EADyBH,EAAA,GACdI,EADcJ,EAAA,GAAAK,EAEIN,mBAAS,IAFbO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAEzBE,EAFyBD,EAAA,GAEbE,EAFaF,EAAA,GAAAG,EAGcV,mBAAS,IAHvBW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAGzBE,EAHyBD,EAAA,GAGJE,EAHIF,EAAA,GAAAG,EAIUd,mBAAS,IAJnBe,EAAAb,OAAAC,EAAA,EAAAD,CAAAY,EAAA,GAIzBE,EAJyBD,EAAA,GAIVE,EAJUF,EAAA,GAAAG,EAKoBlB,mBAAS,IAL7BmB,EAAAjB,OAAAC,EAAA,EAAAD,CAAAgB,EAAA,GAKzBE,EALyBD,EAAA,GAKNE,EALMF,EAAA,GAM1BG,EAAoB,WACtBC,IAAMC,KAAN,mCAA+C,CAC3CC,EAAGrB,IAENsB,KAAK,SAACC,GACHN,EAAuBM,EAASC,KAAK,GAAGC,aA+BhD,OARAC,oBAAU,WACPP,IAAMQ,IAAN,uCACCL,KAAK,SAACC,GACNV,EAAiBU,EAASC,QAG3BN,KACA,CAAClB,IAGA4B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UAAd,qBACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAAb,yCAA2DH,EAAAC,EAAAC,cAAA,WAA3D,uDACDF,EAAAC,EAAAC,cAAA,WADC,+DAGAF,EAAAC,EAAAC,cAAA,WACJF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAACE,EAAA,EAAD,KAEAJ,EAAAC,EAAAC,cAAA,SAAOC,UAAU,eACbH,EAAAC,EAAAC,cAACE,EAAA,EAAKC,MAAN,CAAYF,UAAU,aAClBG,QAAQ,QACRC,YAAY,4BAEZC,SAAU,SAACC,GAAD,OAAOpC,EAAaoC,EAAEC,OAAOC,UAG3CX,EAAAC,EAAAC,cAAA,WACGF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,eACpBH,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,kBAAkBK,SArCpC,SAACI,GACjB/B,EAAe+B,EAAiBF,OAAOC,SAqCnBX,EAAAC,EAAAC,cAAA,2CACClB,EAAc6B,IAAI,SAAChB,GAChB,OACIG,EAAAC,EAAAC,cAAA,UAAQS,MAAOd,EAASiB,MACnBjB,EAASkB,SAK1Bf,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAQb,UAAU,SACdc,MAAM,SACNC,KAAK,QACLC,QAlEF,WAClB1C,EAAcL,GAEdkB,IAEA,IAAIM,EAAO,CACPH,EAAIrB,EACJgD,OAAQhC,EACRsB,OAAQ9B,GAEZW,IAAMC,KAAN,sCAAkDI,GACjDF,KAAK,SAACC,GACHlB,EAAckB,EAASC,KAAKyB,oBAmDhB,aAQArB,EAAAC,EAAAC,cAAA,WAAMF,EAAAC,EAAAC,cAAA,WACNF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,eAAqBH,EAAAC,EAAAC,cAAA,WACtCF,EAAAC,EAAAC,cAACE,EAAA,EAAKC,MAAN,CAAYF,UAAU,cAClBG,QAASgB,IACTf,YAAY,4BACZI,MAAOnC,MAMnBwB,EAAAC,EAAAC,cAAA,WAAMF,EAAAC,EAAAC,cAAA,WAAMF,EAAAC,EAAAC,cAAA,WACZF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WAAMF,EAAAC,EAAAC,cAAA,WAENF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,UAAb,4CC5FDoB,MAVf,WACE,OAEEvB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACpC,EAAD,QCCA0D,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DAqCnC,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTrC,KAAK,SAAC0C,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfR,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,+GAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAAST,KAMlBO,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUV,UAO5BW,MAAM,SAACC,GACNL,QAAQK,MAAM,4CAA6CA,KC9FjE,IAYeC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAA3C,EAAA,GAAAf,KAAA0D,EAAAC,KAAA,WAAqB3D,KAAK,SAAA4D,GAAiD,IAA9CC,EAA8CD,EAA9CC,OAAQC,EAAsCF,EAAtCE,OAAQC,EAA8BH,EAA9BG,OAAQC,EAAsBJ,EAAtBI,OAAQC,EAAcL,EAAdK,QAC3DJ,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAQT,MCEDU,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHhE,EAAAC,EAAAC,cAACF,EAAAC,EAAMgE,WAAP,KACEjE,EAAAC,EAAAC,cAACgE,EAAD,QFQG,SAAkBlC,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIkC,IAAIC,qBAAwB1C,OAAOC,SAAS0C,MACpDC,SAAW5C,OAAOC,SAAS2C,OAIvC,OAGF5C,OAAO6C,iBAAiB,OAAQ,WAC9B,IAAMxC,EAAK,GAAAyC,OAAMJ,qBAAN,sBAEP5C,GAgEV,SAAiCO,EAAOC,GAEtCyC,MAAM1C,EAAO,CACX2C,QAAS,CAAEC,iBAAkB,YAE5BjF,KAAK,SAACC,GAEL,IAAMiF,EAAcjF,EAAS+E,QAAQ3E,IAAI,gBAEnB,MAApBJ,EAASkF,QACO,MAAfD,IAA8D,IAAvCA,EAAYE,QAAQ,cAG5C7C,UAAUC,cAAc6C,MAAMrF,KAAK,SAAC0C,GAClCA,EAAa4C,aAAatF,KAAK,WAC7BgC,OAAOC,SAASsD,aAKpBnD,EAAgBC,EAAOC,KAG1Be,MAAM,WACLJ,QAAQC,IAAI,mEAtFVsC,CAAwBnD,EAAOC,GAI/BC,UAAUC,cAAc6C,MAAMrF,KAAK,WACjCiD,QAAQC,IACN,8GAMJd,EAAgBC,EAAOC,ME9B/BmD,GAKAlC","file":"static/js/main.944b02fc.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport {\r\n    Form,\r\n    TextArea,\r\n    Button\r\n} from 'semantic-ui-react';\r\nimport axios from 'axios';\r\n\r\nexport default function Translate() {\r\n    const [inputText, setInputText] = useState('');\r\n    const [resultText, setResultText] = useState('');\r\n    const [selectedLanguageKey, setLanguageKey] = useState('')\r\n    const [languagesList, setLanguagesList] = useState([])\r\n    const [detectLanguageKey, setdetectedLanguageKey] = useState('')\r\n    const getLanguageSource = () => {\r\n        axios.post(`https://libretranslate.de/detect`, {\r\n            q: inputText\r\n        })\r\n        .then((response) => {\r\n            setdetectedLanguageKey(response.data[0].language)\r\n        })\r\n    }\r\n    const translateText = () => {\r\n        setResultText(inputText)\r\n\r\n        getLanguageSource();\r\n\r\n        let data = {\r\n            q : inputText,\r\n            source: detectLanguageKey,\r\n            target: selectedLanguageKey\r\n        }\r\n        axios.post(`https://libretranslate.de/translate`, data)\r\n        .then((response) => {\r\n            setResultText(response.data.translatedText)\r\n        })\r\n    }\r\n\r\n    const languageKey = (selectedLanguage) => {\r\n        setLanguageKey(selectedLanguage.target.value)\r\n    }\r\n\r\n    useEffect(() => {\r\n       axios.get(`https://libretranslate.de/languages`)\r\n       .then((response) => {\r\n        setLanguagesList(response.data)\r\n       })\r\n\r\n       getLanguageSource()\r\n    }, [inputText])\r\n    return (\r\n        \r\n        <div className='panel'>\r\n            <div className=\"app-header\">\r\n                <h2 className=\"header\">Text (2)Translate</h2>\r\n                <p className='app-p'>Learn or translate different languages<br /> of your chioce, Arabic, French, Chinese and more...\r\n               <br/> (Accurate Translations for Individuals, Young and Adults)</p>\r\n            </div>\r\n                <hr />\r\n            <div className='app-body'>\r\n                <div className='responsive'>\r\n                    <Form>\r\n                   \r\n                    <label className='label-body'></label>\r\n                        <Form.Field className='input-text'\r\n                            control=\"input\"\r\n                            placeholder='Enter Text to Translate..'\r\n                            \r\n                            onChange={(e) => setInputText(e.target.value)}\r\n                        />\r\n                        \r\n                        <br />\r\n                           <label className='label-body'></label>\r\n                        <br />\r\n                        \r\n                        <select className=\"language-select\" onChange={languageKey}>\r\n                            <option>Please Select Language...</option>\r\n                            {languagesList.map((language) => {\r\n                                return (\r\n                                    <option value={language.code}>\r\n                                        {language.name}\r\n                                    </option>\r\n                                )\r\n                            })}\r\n                        </select>\r\n                        <Button className='button'\r\n                            color=\"orange\" \r\n                            size=\"large\" \r\n                            onClick={translateText}\r\n                        >\r\n                           \r\n                            Translate</Button>\r\n\r\n                        <br /><br />\r\n                        <label className='label-body'></label><br />\r\n                        <Form.Field className='output-text'\r\n                            control={TextArea}\r\n                            placeholder='Your Result Translation..'\r\n                            value={resultText}\r\n                        />\r\n                       \r\n                         \r\n                    </Form>\r\n                </div>\r\n                <br /><br /><br />\r\n                <hr />\r\n                <br /><br />\r\n              \r\n                <div>\r\n                <p className='author'>Created With Love By Balikis Omolewa </p> \r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","\r\nimport './App.css';\r\nimport React from 'react';\r\nimport Translate from './components/Translate';\r\n\r\n\r\n\r\nfunction App() {\r\n  return (\r\n\r\n    <div>\r\n      <Translate />\r\n    </div>\r\n    \r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-react';\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}